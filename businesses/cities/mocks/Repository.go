// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	cities "peduli-covid/businesses/cities"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *Repository) FindAll(ctx context.Context) ([]cities.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []cities.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []cities.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cities.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProvinceCode provides a mock function with given fields: ctx, provinceCode
func (_m *Repository) FindByProvinceCode(ctx context.Context, provinceCode string) ([]cities.Domain, error) {
	ret := _m.Called(ctx, provinceCode)

	var r0 []cities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []cities.Domain); ok {
		r0 = rf(ctx, provinceCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cities.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, provinceCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id int) (cities.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 cities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) cities.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(cities.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, data
func (_m *Repository) Store(ctx context.Context, data *cities.Domain) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cities.Domain) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

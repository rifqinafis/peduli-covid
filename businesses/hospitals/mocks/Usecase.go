// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	hospitals "peduli-covid/businesses/hospitals"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *Usecase) FindAll(ctx context.Context) ([]hospitals.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []hospitals.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []hospitals.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hospitals.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCityID provides a mock function with given fields: ctx, cityID
func (_m *Usecase) FindByCityID(ctx context.Context, cityID int) ([]hospitals.Domain, error) {
	ret := _m.Called(ctx, cityID)

	var r0 []hospitals.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []hospitals.Domain); ok {
		r0 = rf(ctx, cityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hospitals.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, cityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreFromAPI provides a mock function with given fields: ctx
func (_m *Usecase) StoreFromAPI(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	invoices "peduli-covid/businesses/invoices"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *Usecase) FindByUserID(ctx context.Context, userID int) ([]invoices.Domain, error) {
	ret := _m.Called(ctx, userID)

	var r0 []invoices.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []invoices.Domain); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invoices.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Usecase) GetByID(ctx context.Context, id int) (invoices.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 invoices.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) invoices.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(invoices.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, data
func (_m *Usecase) Store(ctx context.Context, data *invoices.Domain) (invoices.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 invoices.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *invoices.Domain) invoices.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(invoices.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *invoices.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
